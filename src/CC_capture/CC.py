import os
import re
import yt_dlp
from playwright.sync_api import sync_playwright

# Path to your cookies file (exported from your browser)
cookies_file = "src/CC_capture/cookies.txt"

# Ensure the cookies file exists
if not os.path.exists(cookies_file):
    os.makedirs(os.path.dirname(cookies_file), exist_ok=True)
    open(cookies_file, 'w').close()  # Create an empty file

def get_video_id(youtube_url: str) -> str:
    """
    Extracts and returns the video ID from a given YouTube URL.
    """
    pattern = r'(?:v=|\/|youtu\.be\/)([0-9A-Za-z_-]{11})'
    match = re.search(pattern, youtube_url)
    return match.group(1) if match else None

# Get cookies from the browser
def get_cookies(youtube_url):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()  
        page.goto(youtube_url)

        my_cookies = context.cookies()
        # Clear cookies
        page.context.clear_cookies()
        browser.close()

        # Writing cookies in Netscape format
        try:
            with open(cookies_file, 'w') as f:
                f.write("# Netscape HTTP Cookie File\n")
                f.write("# This file was generated by Playwright\n")
                f.write("#\n")

                for cookie in my_cookies:
                    domain = cookie["domain"]
                    flag = "TRUE" if domain.startswith(".") else "FALSE"
                    path = cookie["path"]
                    secure = "TRUE" if cookie["secure"] else "FALSE"
                    expiry = cookie.get("expires", 0)  # 0 means session-based
                    name = cookie["name"]
                    value = cookie["value"]

                    f.write(f"{domain}\t{flag}\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n")
        except Exception as e:
            print(f"Error writing to cookies file: {e}")

def fetch_captions(video_url: str) -> str:
    """
    Uses yt-dlp to fetch the captions URL (manual or auto-generated) for the given video URL.
    """
    video_id = get_video_id(video_url)
    if not video_id:
        print("Invalid YouTube URL.")
        return None

    ydl_opts = {
        'skip_download': True,
        'quiet': True,
        'writesubtitles': True,
        'subtitleslangs': ['en'],
        'writeautomaticsub': True,
        'cookiefile': cookies_file,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"https://www.youtube.com/watch?v={video_id}", download=False)
            subtitles = info.get('subtitles', {}).get('en') or info.get('automatic_captions', {}).get('en')
            if subtitles:
                return subtitles[0]['url']
            else:
                print("Captions not available for this video.")
                return None
    except Exception as e:
        print(f"Error fetching captions: {e}")
        return None

if __name__ == "__main__":
    url = input("Enter YouTube Video URL: ")
    caps_url = fetch_captions(url)
    if caps_url:
        print("Fetched Captions URL:")
        print(caps_url)
